---------------------------> Project Jest <--------------------------------
------------------------> Lista de requisitos <----------------------------
---------------------------------------------------------------------------

1 - Crie testes para uma função assíncrona
Complete os testes do arquivo test/asyncJest.spec.js para que funcionem com código assíncrono.

R: Tentei utilizar resolves e rejects que rodou no local mas, apresentou um erro de falta do catch no evaluetor. Provavelmente foi um falso positivo em local, acusado no remoto. Refatorei o test jest para atender uma promise e no resolves (quando o parâmetro de answerPhone for true), incluí a quantidade de asserções passando expect assertions(1); retornei a promise com parâmetro true, que cai no resolves (quando a promise é buscada com êxito), a promise precisa ser retornda dentro do teste jest e o then() pega o seu resultado (answer); agora sim, o texte é lançado com expect passando como parâmetro o retorno da promisse em answer e utilizando o matcher toBe para setar o resultado esperado!
No segunfo test, reject é lançada e espera um resultado false; o teste retorna a promise passando false no parâmetro e retorna um error passado como prâmetro no catch; em seguida é chamado o test com expect, passando como parâmetro o retorno da promise em error e utilizando o matcher toEqual que vai receber o resultado esperado, que no caso é um new Error com uma mensagem!
--> resolves: espera a promise ser resolvida. Caso a promise seja rejeitada, o teste automaticamente irá falhar.
--> reject: espera a promise ser rejeitada. Caso a promise seja resolvida, o teste automaticamente irá falhar.
--> toBe: testa igualdade estrita entre o valor passado para expect e seu argumento.
--> toEqual: testa igualdade estrita entre a referência passada para expect e seu argumento. Para testar igualdade de objetos e arrays, é preciso usar o matcher toEqual , que acessa cada elemento do objeto ou array, fazendo um trabalho de comparação específico e que retorna uma resposta mais voltada para a necessidade dos testes.

---------------------------------------------------------------------------

2 - Crie um "Mock" no arquivo test/mockFunctions.spec.js
Crie mock functions no arquivo test/mockFunctions.spec.js para que os testes mockados 'sobrescrevam' o código definido na pasta src. A idéia é que as funções criadas a partir do Jest tenham prioridade na sua execução.

R: 

---------------------------------------------------------------------------

3 - Crie um Mock para o retorno da API
Crie uma API mock no arquivo test/mockApi.spec.js para que os testes do Jest utilizem retornos de API fixos e independentes de requisições.

Exemplo de resposta da API randomuser.me:

{
  gender: 'female',
  name: { title: 'Ms', first: 'Deborah', last: 'Hanson' },
  location: {
    street: { number: 1299, name: 'Rochestown Road' },
    city: 'Birr',
    state: 'Wicklow',
    country: 'Ireland',
    postcode: 16223,
    coordinates: { latitude: '26.2451', longitude: '45.2995' },
    timezone: {
      offset: '+5:30',
      description: 'Bombay, Calcutta, Madras, New Delhi'
    }
  },
  email: 'deborah.hanson@example.com',
  login: {
    uuid: '45db2b1f-1c9a-4a80-9572-e46614f86c30',
    username: 'bluewolf366',
    password: 'iverson3',
    salt: 'XKOOGc2x',
    md5: '8cb7b4686f3869247b3ed189de780ea6',
    sha1: 'c24641f415cf36f4494ea4007fb3d77b47a6aad5',
    sha256: 'a7bdd079ead0adf21f30cee5b94e5581a9fa0d5fc8b3c1881dbc864dabc55a80'
  },
  dob: { date: '1965-10-01T06:35:49.694Z', age: 55 },
  registered: { date: '2009-02-11T05:48:39.772Z', age: 11 },
  phone: '021-953-7205',
  cell: '081-160-6277',
  id: { name: 'PPS', value: '0109675T' },
  picture: {
    large: 'https://randomuser.me/api/portraits/women/7.jpg',
    medium: 'https://randomuser.me/api/portraits/med/women/7.jpg',
    thumbnail: 'https://randomuser.me/api/portraits/thumb/women/7.jpg'
  },
  nat: 'IE'
}

R: 

---------------------------------------------------------------------------

4 - Crie funções no arquivo test/setupTeardown.spec.js
Intercale funções entre os testes definidos no arquivo test/setupTeardown.spec.js.

R: Os testes já estavam prontos, eu apenas passei uma function beforeEach(), que tem uma callback que retorna a function randomAttack(), isso é necessário pois depois do primeiro ataque o array specialist fica defasado, gerando erro no teste subsequente;
--> beforeEach(): Executa uma função antes que cada um dos testes neste arquivo seja executado. Se a função retornar uma promessa ou for um gerador, Jest espera que a promessa seja resolvida antes de executar o teste.

------------------------------< THE END >--------------------------------